// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  walletAddress String    @unique
  bio           String?
  profile_pic   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt()
  tokens        Token[]
  aiTokens      AIToken[]

  @@index([id, walletAddress])
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model AIToken {
  id               Int     @id @default(autoincrement())
  tokenName        String
  symbol           String
  tokenDescription String
  tokenImageUrl    String
  supply           Int
  contractAddress  String? // To store address after smart contract execution

  // Social links

  website  String?
  twitter  String?
  telegram String?
  discord  String?
  youtube  String?

  // Personality Info
  voiceType       String?
  personalityType String[]

  youtubeChannelId String?
  twitchChannelId  String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  agentDisplayId Int?
  agentDisplay   AgentDisplay?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt()
  TokenPriceHistory TokenPriceHistory[]
}

model AgentDisplayTemplate {
  id            Int      @id @default(autoincrement())
  agentImageUrl String
  agentName     String
  agentIpfsUrl  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
}

model AgentDisplay {
  id            Int      @id @default(autoincrement())
  agentImageUrl String
  agentName     String
  agentIpfsUrl  String
  aiToken       AIToken  @relation(fields: [aiTokenId], references: [id], onDelete: Cascade)
  aiTokenId     Int      @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
}

model TokenPriceHistory {
  id         Int      @id @default(autoincrement())
  priceInWei String // Use string to safely store large uint256 values
  timestamp  DateTime @default(now())

  aiToken   AIToken @relation(fields: [aiTokenId], references: [id], onDelete: Cascade)
  aiTokenId Int

  @@index([aiTokenId, timestamp])
}
